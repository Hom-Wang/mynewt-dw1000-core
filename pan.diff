diff --git a/hw/drivers/dw1000/include/dw1000/dw1000_pan.h b/hw/drivers/dw1000/include/dw1000/dw1000_pan.h
index b3e6a90..c2e37e0 100755
--- a/hw/drivers/dw1000/include/dw1000/dw1000_pan.h
+++ b/hw/drivers/dw1000/include/dw1000/dw1000_pan.h
@@ -80,6 +80,8 @@ typedef struct _dw1000_pan_instance_t{
     dw1000_pan_status_t status;
     dw1000_pan_control_t control;
     dw1000_pan_config_t * config;
+    struct os_callout pan_callout_timer;
+    struct os_callout pan_callout_postprocess;
     uint32_t period;
     uint16_t nframes;
     uint16_t idx;
diff --git a/hw/drivers/dw1000/src/dw1000_pan.c b/hw/drivers/dw1000/src/dw1000_pan.c
index d327e00..e860537 100755
--- a/hw/drivers/dw1000/src/dw1000_pan.c
+++ b/hw/drivers/dw1000/src/dw1000_pan.c
@@ -55,8 +55,6 @@ static void pan_rx_error_cb(dw1000_dev_instance_t * inst);
 static void pan_tx_error_cb(dw1000_dev_instance_t * inst);
 static dw1000_pan_status_t dw1000_pan_blink(dw1000_dev_instance_t * inst, dw1000_dev_modes_t mode);
 static void pan_postprocess(struct os_event * ev);
-static struct os_callout g_pan_callout_timer;
-static struct os_callout g_pan_callout_postprocess;
 
 static void 
 pan_timer_ev_cb(struct os_event *ev) {
@@ -67,14 +65,14 @@ pan_timer_ev_cb(struct os_event *ev) {
     dw1000_pan_instance_t * pan = inst->pan; 
 
     if(dw1000_pan_blink(inst, DWT_BLOCKING).start_tx_error)
-        os_callout_reset(&g_pan_callout_timer, OS_TICKS_PER_SEC * (pan->period - MYNEWT_VAL(OS_LATENCY)) * 1e-6);   
+        os_callout_reset(&pan->pan_callout_timer, OS_TICKS_PER_SEC * (pan->period - MYNEWT_VAL(OS_LATENCY)) * 1e-6);   
 }
 
 static void 
 pan_timer_init(dw1000_dev_instance_t * inst) {
     dw1000_pan_instance_t * pan = inst->pan; 
-    os_callout_init(&g_pan_callout_timer, os_eventq_dflt_get(), pan_timer_ev_cb, (void *) inst);
-    os_callout_reset(&g_pan_callout_timer, OS_TICKS_PER_SEC/100);
+    os_callout_init(&pan->pan_callout_timer, os_eventq_dflt_get(), pan_timer_ev_cb, (void *) inst);
+    os_callout_reset(&pan->pan_callout_timer, OS_TICKS_PER_SEC/100);
     pan->status.timer_enabled = true;
 }
 
@@ -193,8 +191,8 @@ void dw1000_pan_set_ext_callbacks(dw1000_dev_instance_t * inst, dw1000_extension
  */
 void 
 dw1000_pan_set_postprocess(dw1000_dev_instance_t * inst, os_event_fn * pan_postprocess){
-    os_callout_init(&g_pan_callout_postprocess, os_eventq_dflt_get(), pan_postprocess, (void *) inst);
     dw1000_pan_instance_t * pan = inst->pan; 
+    os_callout_init(&pan->pan_callout_postprocess, os_eventq_dflt_get(), pan_postprocess, (void *) inst);
     pan->control.postprocess = true;
 }
 
@@ -306,7 +304,7 @@ pan_rx_complete_cb(dw1000_dev_instance_t * inst){
     }         
     // both pan_master and TAG/ANCHOR
     if (pan->control.postprocess) 
-        os_eventq_put(os_eventq_dflt_get(), &g_pan_callout_postprocess.c_ev); 
+        os_eventq_put(os_eventq_dflt_get(), &pan->pan_callout_postprocess.c_ev); 
 }
 
 /*! 
@@ -323,7 +321,7 @@ pan_rx_complete_cb(dw1000_dev_instance_t * inst){
  */
 static void 
 pan_tx_complete_cb(dw1000_dev_instance_t * inst){
-    //printf("pan_tx_complete_cb\n");
+   printf("pan_tx_complete_cb\n");
    if(inst->fctrl_array[0] != FCNTL_IEEE_BLINK_TAG_64){
         if(inst->extension_cb->next != NULL){
 			inst->extension_cb = inst->extension_cb->next;
@@ -333,9 +331,13 @@ pan_tx_complete_cb(dw1000_dev_instance_t * inst){
 	return;
     }
     dw1000_pan_instance_t * pan = inst->pan;
-    if (pan->status.timer_enabled && pan->status.valid == false)
-        os_callout_reset(&g_pan_callout_timer, OS_TICKS_PER_SEC * (pan->period - MYNEWT_VAL(OS_LATENCY)) * 1e-6); 
-    os_sem_release(&inst->pan->sem);  
+#if 1
+    if (pan->status.timer_enabled && pan->status.valid == false){
+        printf("pan_tx_complete_cb\n");
+        os_callout_reset(&pan->pan_callout_timer, OS_TICKS_PER_SEC * (pan->period - MYNEWT_VAL(OS_LATENCY)) * 1e-6); 
+        os_sem_release(&inst->pan->sem);  
+    }
+#endif
     pan->idx++;
 }
 
@@ -415,10 +417,16 @@ pan_rx_timeout_cb(dw1000_dev_instance_t * inst){
         }
         return;
     }
-    dw1000_pan_instance_t * pan = inst->pan;  
+    dw1000_pan_instance_t * pan = inst->pan; 
+    os_sem_release(&pan->sem);  
+    os_sem_release(&pan->sem_waitforsucess);
+    dw1000_pan_stop(inst);
+    dw1000_set_rx_timeout(inst, 0);
+    dw1000_start_rx(inst);
+#if 0 
     if (pan->status.timer_enabled)
-        os_callout_reset(&g_pan_callout_timer, OS_TICKS_PER_SEC * (pan->period - MYNEWT_VAL(OS_LATENCY)) * 1e-6);    
-    os_sem_release(&inst->pan->sem);  
+        os_callout_reset(&pan->pan_callout_timer, OS_TICKS_PER_SEC * (pan->period - MYNEWT_VAL(OS_LATENCY)) * 1e-6);
+#endif
 }
 
 /*! 
@@ -499,9 +507,9 @@ dw1000_pan_start(dw1000_dev_instance_t * inst, dw1000_dev_modes_t mode){
     os_error_t err = os_sem_pend(&pan->sem_waitforsucess, OS_TIMEOUT_NEVER);
     assert(err == OS_OK);
 
-    pan->idx = 0x0;  
+    pan->idx = 0x1;  
     pan->status.valid = false;
-    pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes]; 
+    pan_frame_t * frame = pan->frames[(pan->idx-1)%pan->nframes]; 
     frame->transmission_timestamp = dw1000_read_systime(inst); 
     pan_timer_init(inst);
 
@@ -533,7 +541,7 @@ void
 dw1000_pan_stop(dw1000_dev_instance_t * inst){
     dw1000_pan_instance_t * pan = inst->pan;   
     pan->status.timer_enabled = false;
-    os_callout_stop(&g_pan_callout_timer);
+    os_callout_stop(&pan->pan_callout_timer);
     printf("{\"utime\":%lu,\"PAN\":\"%s\"}\n", 
             os_cputime_ticks_to_usecs(os_cputime_get32()),
             "Stopped"
